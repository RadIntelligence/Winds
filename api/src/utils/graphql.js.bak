import { makeExecutableSchema } from 'graphql-tools';
const graphqlHTTP = require('express-graphql');
// const { buildSchema } = require('graphql');
const mysql = require('mysql');

// GQL > Start
// Some fake data
const books = [
	{
		title: "Harry Potter and the Sorcerer's stone",
		author: 'J.K. Rowling',
	},
	{
		title: 'Jurassic Park',
		author: 'Michael Crichton',
	},
];

// The GraphQL schema in string form
const typeDefs = `
  type Query { 
    books: [Book] 
  }
  type Book { 
    title: String, 
    author: String 
  }
  type User {
    id: String
    name: String
    job_title: String
    email: String
  }
  type Query {
    getUsers: [User],
    getUserInfo(id: Int) : User
  }
  type Mutation {
    updateUserInfo(id: Int, name: String, email: String, job_title: String) : Boolean
    createUser(name: String, email: String, job_title: String) : Boolean
    deleteUser(id: Int) : Boolean
  }
`;

const queryDB = (req, sql, args) =>
	new Promise((resolve, reject) => {
		req.mysqlDb.query(sql, args, (err, rows) => {
			if (err) return reject(err);
			rows.changedRows || rows.affectedRows || rows.insertId
				? resolve(true)
				: resolve(rows);
		});
	});

// The resolvers
const resolvers = {
	Query: { books: () => books },
};

// Put together a schema
exports.graphqlSchema = makeExecutableSchema({
	typeDefs,
	resolvers,
});

// exports.graphqlSchema = () => {
// 	return makeExecutableSchema({ typeDefs, resolvers });
// };
